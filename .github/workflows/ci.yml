name: 🐱 Cat Management System - Full CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '22.x'

jobs:
  # --------------------------------------------------
  # 1. Code Quality (Lint & Format)
  # --------------------------------------------------
  lint_and_format:
    name: 🧹 Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: 📦 Install all dependencies (locked)
        run: HUSKY=0 npm ci --workspaces --include-workspace-root

      - name: 🔍 Run Lint Check (All Workspaces)
        run: npm run lint --workspaces --if-present

      - name: 🎨 Run Format Check (All Workspaces)
        run: npm run format:check --workspaces --if-present

  # --------------------------------------------------
  # 2. Build & Unit Test (Backend & Frontend)
  # --------------------------------------------------
  build_and_test:
    name: 🛠️ Build & Test
    runs-on: ubuntu-latest
    needs: lint_and_format
    strategy:
      matrix:
        workspace: [backend, cat-ui-test]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: 📦 Install deps (once per job)
        run: HUSKY=0 npm ci --workspaces --include-workspace-root
 # Prisma クライアント生成（backend のみ）
      - name: 🔧 Prisma generate (backend)
        if: matrix.workspace == 'backend'
        working-directory: backend
        run: npx prisma generate

      - name: 🏗️ Build ${{ matrix.workspace }}
        run: npm run build --workspace=${{ matrix.workspace }} --if-present

      - name: 🧪 Unit Tests ${{ matrix.workspace }}
        run: npm run test --workspace=${{ matrix.workspace }} -- --passWithNoTests

  # --------------------------------------------------
  # 3. E2E Test (Backend)
  # --------------------------------------------------
  e2e_test:
    name: 🚀 E2E Tests
    runs-on: ubuntu-latest
    needs: build_and_test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: cat_management_test
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user -d cat_management_test -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: 📦 Install deps (all workspaces)
        run: HUSKY=0 npm ci --workspaces --include-workspace-root

      # Prisma migrate（サービスDBを使用）
      - name: 🔄 Prisma migrate
        working-directory: backend
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/cat_management_test?schema=public
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: 🧪 Run E2E tests (backend)
        working-directory: backend
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/cat_management_test?schema=public
        run: npm run test:e2e --if-present

  # --------------------------------------------------
  # 4. Success Notification
  # --------------------------------------------------
  ci_success:
    name: ✅ CI Passed
    runs-on: ubuntu-latest
    needs: [lint_and_format, build_and_test, e2e_test]
    if: success()
    steps:
      - name: 🎉 Success Message
        run: echo "🎉 All CI checks passed successfully! Ready for review."
