/**
 * データベースパフォーマンステスト
 * 血統書データの大量クエリ処理性能を測定
 */

import { PrismaClient } from '@prisma/client';
import { performance } from 'perf_hooks';

const prisma = new PrismaClient();

interface PerformanceResult {
  operation: string;
  recordCount: number;
  executionTime: number;
  averageTimePerRecord: number;
}

class DatabasePerformanceTester {
  private results: PerformanceResult[] = [];

  async testPedigreeQueries(): Promise<void> {
    console.log('🔍 血統書データベースパフォーマンステスト開始...\n');

    // 1. 全件数取得
    await this.measureQuery(
      '全血統書レコード数取得',
      async () => await prisma.pedigree.count(),
    );

    // 2. 基本的な一覧取得（ページネーション）
    await this.measureQuery(
      '血統書一覧取得（100件）',
      async () =>
        await prisma.pedigree.findMany({
          take: 100,
          include: {
            breed: true,
            color: true,
          },
        }),
    );

    // 3. 複雑な検索クエリ
    await this.measureQuery(
      '猫種フィルタリング検索',
      async () =>
        await prisma.pedigree.findMany({
          where: {
            breed: {
              name: {
                contains: 'ペルシャ',
              },
            },
          },
          include: {
            breed: true,
            color: true,
          },
        }),
    );

    // 4. 家系図関連の複雑なクエリ
    await this.measureQuery(
      '親子関係を含む検索（3世代）',
      async () =>
        await prisma.pedigree.findMany({
          where: {
            OR: [
              { fatherId: { not: null } },
              { motherId: { not: null } },
            ],
          },
          include: {
            breed: true,
            color: true,
            fatherPedigree: {
              include: {
                breed: true,
                fatherPedigree: {
                  include: { breed: true },
                },
                motherPedigree: {
                  include: { breed: true },
                },
              },
            },
            motherPedigree: {
              include: {
                breed: true,
                fatherPedigree: {
                  include: { breed: true },
                },
                motherPedigree: {
                  include: { breed: true },
                },
              },
            },
          },
          take: 50,
        }),
    );

    // 5. 集計クエリ
    await this.measureQuery(
      '猫種別統計情報',
      async () =>
        await prisma.pedigree.groupBy({
          by: ['breedCode'],
          _count: {
            id: true,
          },
          orderBy: {
            _count: {
              id: 'desc',
            },
          },
        }),
    );
  }

  private async measureQuery<T>(
    operationName: string,
    queryFunction: () => Promise<T>,
  ): Promise<T> {
    console.log(`⏱️  ${operationName} 実行中...`);

    const startTime = performance.now();
    const result = await queryFunction();
    const endTime = performance.now();

    const executionTime = Number((endTime - startTime).toFixed(2));
    let recordCount = 0;

    if (Array.isArray(result)) {
      recordCount = result.length;
    } else if (typeof result === 'number') {
      recordCount = result;
    } else if (result && typeof result === 'object') {
      recordCount = 1;
    }

    const averageTimePerRecord =
      recordCount > 0 ? Number((executionTime / recordCount).toFixed(4)) : 0;

    const performanceResult: PerformanceResult = {
      operation: operationName,
      recordCount,
      executionTime,
      averageTimePerRecord,
    };

    this.results.push(performanceResult);

    console.log(
      `✅ ${operationName}: ${executionTime}ms (${recordCount}件, 平均: ${averageTimePerRecord}ms/件)\n`,
    );

    return result;
  }

  displaySummary(): void {
    console.log('📊 パフォーマンステスト結果サマリー');
    console.log('='.repeat(80));
    console.log(
      '操作'.padEnd(30) +
        '実行時間(ms)'.padEnd(15) +
        '件数'.padEnd(10) +
        '平均(ms/件)',
    );
    console.log('-'.repeat(80));

    this.results.forEach(result => {
      console.log(
        result.operation.padEnd(30) +
          result.executionTime.toString().padEnd(15) +
          result.recordCount.toString().padEnd(10) +
          result.averageTimePerRecord.toString(),
      );
    });

    console.log('-'.repeat(80));

    // パフォーマンス警告
    const slowQueries = this.results.filter(r => r.executionTime > 3000);
    if (slowQueries.length > 0) {
      console.log('\n⚠️  3秒以上かかっているクエリがあります:');
      slowQueries.forEach(query => {
        console.log(`   - ${query.operation}: ${query.executionTime}ms`);
      });
    } else {
      console.log('\n✅ すべてのクエリが3秒以内で完了しました！');
    }
  }
}

// メイン実行
async function main(): Promise<void> {
  const tester = new DatabasePerformanceTester();

  try {
    await tester.testPedigreeQueries();
    tester.displaySummary();
  } catch (error) {
    console.error('❌ パフォーマンステストでエラーが発生しました:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// スクリプトとして実行された場合
if (require.main === module) {
  main().catch(error => {
    console.error('❌ 実行エラー:', error);
    process.exit(1);
  });
}

export { DatabasePerformanceTester };
