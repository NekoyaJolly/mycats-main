generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "darwin", "darwin-arm64", "windows", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  clerkId         String           @unique
  email           String           @unique
  firstName       String?
  lastName        String?
  role            UserRole         @default(USER)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  breedingRecords BreedingRecord[]
  careRecords     CareRecord[]
  cats            Cat[]
  schedules       Schedule[]

  @@map("users")
}

model Breed {
  id          String     @id @default(uuid())
  code        Int        @unique
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cats        Cat[]      @relation("CatBreed")
  pedigrees   Pedigree[]

  @@map("breeds")
}

model CoatColor {
  id          String     @id @default(uuid())
  code        Int        @unique
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cats        Cat[]      @relation("CatColor")
  pedigrees   Pedigree[]

  @@map("coat_colors")
}

model GenderList {
  id          String     @id @default(uuid())
  code        Int        @unique
  name        String?    @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  pedigrees   Pedigree[] @relation("PedigreeGenderList")

  @@map("gender_list")
}

model Cat {
  id                    String           @id @default(uuid())
  registrationId        String           @unique
  name                  String
  legacyBreed           String?
  legacyColor           String?
  pattern               String?
  gender                Gender
  birthDate             DateTime
  weight                Float?
  microchipId           String?          @unique
  isActive              Boolean          @default(true)
  notes                 String?
  imageUrl              String?
  fatherId              String?
  motherId              String?
  ownerId               String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  breedName             String?
  colorName             String?
  femaleBreedingRecords BreedingRecord[] @relation("FemaleBreeding")
  maleBreedingRecords   BreedingRecord[] @relation("MaleBreeding")
  careRecords           CareRecord[]
  tags                  CatTag[]
  breed                 Breed?           @relation("CatBreed", fields: [breedName], references: [name])
  color                 CoatColor?       @relation("CatColor", fields: [colorName], references: [name])
  father                Cat?             @relation("CatFather", fields: [fatherId], references: [id])
  fatherOf              Cat[]            @relation("CatFather")
  mother                Cat?             @relation("CatMother", fields: [motherId], references: [id])
  motherOf              Cat[]            @relation("CatMother")
  owner                 User             @relation(fields: [ownerId], references: [id])
  pedigrees             Pedigree[]
  schedules             Schedule[]

  @@index([ownerId])
  @@index([breedName])
  @@index([colorName])
  @@index([birthDate])
  @@index([isActive])
  @@index([gender])
  @@index([createdAt])
  @@map("cats")
}

model BreedingRecord {
  id              String         @id @default(uuid())
  maleId          String
  femaleId        String
  breedingDate    DateTime
  expectedDueDate DateTime?
  actualDueDate   DateTime?
  numberOfKittens Int?
  notes           String?
  status          BreedingStatus @default(PLANNED)
  recordedBy      String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  female          Cat            @relation("FemaleBreeding", fields: [femaleId], references: [id])
  male            Cat            @relation("MaleBreeding", fields: [maleId], references: [id])
  recorder        User           @relation(fields: [recordedBy], references: [id])

  @@index([maleId])
  @@index([femaleId])
  @@index([breedingDate])
  @@index([expectedDueDate])
  @@index([status])
  @@map("breeding_records")
}

model CareRecord {
  id           String    @id @default(uuid())
  catId        String
  careType     CareType
  description  String
  careDate     DateTime
  nextDueDate  DateTime?
  cost         Float?
  veterinarian String?
  notes        String?
  recordedBy   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cat          Cat       @relation(fields: [catId], references: [id])
  recorder     User      @relation(fields: [recordedBy], references: [id])

  @@index([catId])
  @@index([careDate])
  @@index([nextDueDate])
  @@index([careType])
  @@map("care_records")
}

model Schedule {
  id           String         @id @default(uuid())
  title        String
  description  String?
  scheduleDate DateTime
  scheduleType ScheduleType
  status       ScheduleStatus @default(PENDING)
  priority     Priority       @default(MEDIUM)
  catId        String?
  assignedTo   String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  assignee     User           @relation(fields: [assignedTo], references: [id])
  cat          Cat?           @relation(fields: [catId], references: [id])

  @@map("schedules")
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  color       String   @default("#3B82F6")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cats        CatTag[]

  @@map("tags")
}

model Pedigree {
  id                    String      @id @default(uuid())
  pedigreeId            String      @unique
  catId                 String?
  title                 String?
  catName               String
  breedCode             Int?
  gender                Int?
  eyeColor              String?
  coatColorCode         Int?
  birthDate             DateTime?
  registrationDate      DateTime?
  breederName           String?
  ownerName             String?
  brotherCount          Int?
  sisterCount           Int?
  notes                 String?
  notes2                String?
  otherNo               String?
  oldCode               String?
  fatherPedigreeId      String?
  motherPedigreeId      String?
  paternalGrandfatherId String?
  paternalGrandmotherId String?
  maternalGrandfatherId String?
  maternalGrandmotherId String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  catName2              String?
  fatherCoatColor       String?
  fatherEyeColor        String?
  fatherJCU             String?
  fatherOtherCode       String?
  fatherTitle           String?
  ffCatName             String?
  ffJCU                 String?
  ffTitle               String?
  fffCatName            String?
  fffJCU                String?
  fffTitle              String?
  ffmCatName            String?
  ffmJCU                String?
  ffmTitle              String?
  fmCatName             String?
  fmJCU                 String?
  fmTitle               String?
  fmfCatName            String?
  fmfJCU                String?
  fmfTitle              String?
  fmmCatName            String?
  fmmJCU                String?
  fmmTitle              String?
  mfCatName             String?
  mfJCU                 String?
  mfTitle               String?
  mffCatName            String?
  mffJCU                String?
  mffTitle              String?
  mfmCatName            String?
  mfmJCU                String?
  mfmTitle              String?
  mmCatName             String?
  mmJCU                 String?
  mmTitle               String?
  mmfCatName            String?
  mmfJCU                String?
  mmfTitle              String?
  mmmCatName            String?
  mmmJCU                String?
  mmmTitle              String?
  motherCoatColor       String?
  motherEyeColor        String?
  motherJCU             String?
  motherOtherCode       String?
  motherTitle           String?
  fatherCatName2        String?
  fatherName            String?
  motherCatName2        String?
  motherName            String?
  ffCatColor            String?
  fmCatColor            String?
  mfCatColor            String?
  mmCatColor            String?
  fffCatColor           String?
  ffmCatColor           String?
  fmfCatColor           String?
  fmmCatColor           String?
  mffCatColor           String?
  mfmCatColor           String?
  mmfCatColor           String?
  mmmCatColor           String?
  breed                 Breed?      @relation(fields: [breedCode], references: [code])
  cat                   Cat?        @relation(fields: [catId], references: [id])
  color                 CoatColor?  @relation(fields: [coatColorCode], references: [code])
  fatherPedigree        Pedigree?   @relation("PedigreeFather", fields: [fatherPedigreeId], references: [id])
  fatherOf              Pedigree[]  @relation("PedigreeFather")
  genderList            GenderList? @relation("PedigreeGenderList", fields: [gender], references: [code])
  maternalGrandfather   Pedigree?   @relation("MatGrandfather", fields: [maternalGrandfatherId], references: [id])
  maternalGrandfatherOf Pedigree[]  @relation("MatGrandfather")
  maternalGrandmother   Pedigree?   @relation("MatGrandmother", fields: [maternalGrandmotherId], references: [id])
  maternalGrandmotherOf Pedigree[]  @relation("MatGrandmother")
  motherPedigree        Pedigree?   @relation("PedigreeMother", fields: [motherPedigreeId], references: [id])
  motherOf              Pedigree[]  @relation("PedigreeMother")
  paternalGrandfather   Pedigree?   @relation("PatGrandfather", fields: [paternalGrandfatherId], references: [id])
  paternalGrandfatherOf Pedigree[]  @relation("PatGrandfather")
  paternalGrandmother   Pedigree?   @relation("PatGrandmother", fields: [paternalGrandmotherId], references: [id])
  paternalGrandmotherOf Pedigree[]  @relation("PatGrandmother")

  @@map("pedigrees")
}

model CatTag {
  catId     String
  tagId     String
  createdAt DateTime @default(now())
  cat       Cat      @relation(fields: [catId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([catId, tagId])
  @@map("cat_tags")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum BreedingStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CareType {
  VACCINATION
  HEALTH_CHECK
  GROOMING
  DENTAL_CARE
  MEDICATION
  SURGERY
  OTHER
}

enum ScheduleType {
  BREEDING
  CARE
  APPOINTMENT
  REMINDER
  MAINTENANCE
}

enum ScheduleStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
