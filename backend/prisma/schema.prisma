generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "darwin", "darwin-arm64", "windows", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  clerkId         String           @unique
  email           String           @unique
  firstName       String?
  lastName        String?
  role            UserRole         @default(USER)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  breedingRecords BreedingRecord[]
  careRecords     CareRecord[]
  cats            Cat[]
  schedules       Schedule[]

  @@map("users")
}

model Breed {
  id          String     @id @default(uuid())
  code        Int        @unique
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cats        Cat[]      @relation("CatBreed")
  pedigrees   Pedigree[]

  @@map("breeds")
}

model CoatColor {
  id          String     @id @default(uuid())
  code        Int        @unique
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cats        Cat[]      @relation("CatColor")
  pedigrees   Pedigree[]

  @@map("coat_colors")
}

model GenderList {
  id          String     @id @default(uuid())
  code        Int        @unique
  name        String?    @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  pedigrees   Pedigree[] @relation("PedigreeGenderList")

  @@map("gender_list")
}

model Cat {
  id                    String           @id @default(uuid())
  registrationId        String           @unique
  name                  String
  legacyBreed           String?
  legacyColor           String?
  pattern               String?
  gender                Gender
  birthDate             DateTime
  weight                Float?
  microchipId           String?          @unique
  isActive              Boolean          @default(true)
  notes                 String?
  imageUrl              String?
  fatherId              String?
  motherId              String?
  ownerId               String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  breedName             String?
  colorName             String?
  femaleBreedingRecords BreedingRecord[] @relation("FemaleBreeding")
  maleBreedingRecords   BreedingRecord[] @relation("MaleBreeding")
  careRecords           CareRecord[]
  tags                  CatTag[]
  breed                 Breed?           @relation("CatBreed", fields: [breedName], references: [name])
  color                 CoatColor?       @relation("CatColor", fields: [colorName], references: [name])
  father                Cat?             @relation("CatFather", fields: [fatherId], references: [id])
  fatherOf              Cat[]            @relation("CatFather")
  mother                Cat?             @relation("CatMother", fields: [motherId], references: [id])
  motherOf              Cat[]            @relation("CatMother")
  owner                 User             @relation(fields: [ownerId], references: [id])
  pedigrees             Pedigree[]
  schedules             Schedule[]

  @@index([ownerId])
  @@index([breedName])
  @@index([colorName])
  @@index([birthDate])
  @@index([isActive])
  @@index([gender])
  @@index([createdAt])
  @@map("cats")
}

model BreedingRecord {
  id              String         @id @default(uuid())
  maleId          String
  femaleId        String
  breedingDate    DateTime
  expectedDueDate DateTime?
  actualDueDate   DateTime?
  numberOfKittens Int?
  notes           String?
  status          BreedingStatus @default(PLANNED)
  recordedBy      String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  female          Cat            @relation("FemaleBreeding", fields: [femaleId], references: [id])
  male            Cat            @relation("MaleBreeding", fields: [maleId], references: [id])
  recorder        User           @relation(fields: [recordedBy], references: [id])

  @@index([maleId])
  @@index([femaleId])
  @@index([breedingDate])
  @@index([expectedDueDate])
  @@index([status])
  @@map("breeding_records")
}

model CareRecord {
  id           String    @id @default(uuid())
  catId        String
  careType     CareType
  description  String
  careDate     DateTime
  nextDueDate  DateTime?
  cost         Float?
  veterinarian String?
  notes        String?
  recordedBy   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cat          Cat       @relation(fields: [catId], references: [id])
  recorder     User      @relation(fields: [recordedBy], references: [id])

  @@index([catId])
  @@index([careDate])
  @@index([nextDueDate])
  @@index([careType])
  @@map("care_records")
}

model Schedule {
  id           String         @id @default(uuid())
  title        String
  description  String?
  scheduleDate DateTime
  scheduleType ScheduleType
  status       ScheduleStatus @default(PENDING)
  priority     Priority       @default(MEDIUM)
  catId        String?
  assignedTo   String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  assignee     User           @relation(fields: [assignedTo], references: [id])
  cat          Cat?           @relation(fields: [catId], references: [id])

  @@map("schedules")
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  color       String   @default("#3B82F6")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cats        CatTag[]

  @@map("tags")
}

model Pedigree {
  id                    String      @id @default(uuid())
  pedigreeId            String      @unique              // PedigreeID (text, NO NULL)
  title                 String?                           // Title (text, YES)
  catName               String                            // CatName (text, YES)
  catName2              String?                           // CatName2 (text, YES)
  breedCode             Int?                              // BreedCode (integer, YES)
  genderCode            Int?                              // GenderCode (integer, YES) - 設計書に合わせて変更
  eyeColor              String?                           // EyeColor (text, YES)
  coatColorCode         Int?                              // CoatColorCode (integer, YES)
  birthDate             String?                           // BirthDate (text, YES) - 設計書に合わせてtext型
  breederName           String?                           // BreederName (text, YES)
  ownerName             String?                           // OwnerName (text, YES)
  registrationDate      String?                           // RegistrationDate (text, YES) - 設計書に合わせてtext型
  brotherCount          Int?                              // BrotherCount (integer, YES)
  sisterCount           Int?                              // SisterCount (integer, YES)
  notes                 String?                           // Notes (text, YES)
  notes2                String?                           // Notes2 (text, YES)
  otherNo               String?                           // OtherNo (text, YES)
  
  // 父猫情報
  fatherTitle           String?                           // FatherTitle (text, YES)
  fatherCatName         String?                           // FatherCatName (text, YES) - 設計書で必要
  fatherCatName2        String?                           // FatherCatName2 (text, YES)
  fatherCoatColor       String?                           // FatherCoatColor (text, YES)
  fatherEyeColor        String?                           // FatherEyeColor (text, YES)
  fatherJCU             String?                           // FatherJCU (text, YES)
  fatherOtherCode       String?                           // FatherOtherCode (text, YES)
  
  // 母猫情報
  motherTitle           String?                           // MotherTitle (text, YES)
  motherCatName         String?                           // MotherCatName (text, YES) - 設計書で必要
  motherCatName2        String?                           // MotherCatName2 (text, YES)
  motherCoatColor       String?                           // MotherCoatColor (text, YES)
  motherEyeColor        String?                           // MotherEyeColor (text, YES)
  motherJCU             String?                           // MotherJCU (text, YES)
  motherOtherCode       String?                           // MotherOtherCode (text, YES)
  
  // 祖父母情報 (父方祖父母)
  ffTitle               String?                           // FFTitle (text, YES)
  ffCatName             String?                           // FFCatName (text, YES)
  ffCatColor            String?                           // FFCatColor (text, YES)
  ffJCU                 String?                           // FFJCU (text, YES)
  
  fmTitle               String?                           // FMTitle (text, YES)
  fmCatName             String?                           // FMCatName (text, YES)
  fmCatColor            String?                           // FMCatColor (text, YES)
  fmJCU                 String?                           // FMJCU (text, YES)
  
  // 祖父母情報 (母方祖父母)
  mfTitle               String?                           // MFTitle (text, YES)
  mfCatName             String?                           // MFCatName (text, YES)
  mfCatColor            String?                           // MFCatColor (text, YES)
  mfJCU                 String?                           // MFJCU (text, YES)
  
  mmTitle               String?                           // MMTitle (text, YES)
  mmCatName             String?                           // MMCatName (text, YES)
  mmCatColor            String?                           // MMCatColor (text, YES)
  mmJCU                 String?                           // MMJCU (text, YES)
  
  // 曾祖父母情報 (父方父方)
  fffTitle              String?                           // FFFTitle (text, YES)
  fffCatName            String?                           // FFFCatName (text, YES)
  fffCatColor           String?                           // FFFCatColor (text, YES)
  fffJCU                String?                           // FFFJCU (text, YES)
  
  ffmTitle              String?                           // FFMTitle (text, YES)
  ffmCatName            String?                           // FFMCatName (text, YES)
  ffmCatColor           String?                           // FFMCatColor (text, YES)
  ffmJCU                String?                           // FFMJCU (text, YES)
  
  // 曾祖父母情報 (父方母方)
  fmfTitle              String?                           // FMFTitle (text, YES)
  fmfCatName            String?                           // FMFCatName (text, YES)
  fmfCatColor           String?                           // FMFCatColor (text, YES)
  fmfJCU                String?                           // FMFJCU (text, YES)
  
  fmmTitle              String?                           // FMMTitle (text, YES)
  fmmCatName            String?                           // FMMCatName (text, YES)
  fmmCatColor           String?                           // FMMCatColor (text, YES)
  fmmJCU                String?                           // FMMJCU (text, YES)
  
  // 曾祖父母情報 (母方父方)
  mffTitle              String?                           // MFFTitle (text, YES)
  mffCatName            String?                           // MFFCatName (text, YES)
  mffCatColor           String?                           // MFFCatColor (text, YES)
  mffJCU                String?                           // MFFJCU (text, YES)
  
  mfmTitle              String?                           // MFMTitle (text, YES)
  mfmCatName            String?                           // MFMCatName (text, YES)
  mfmCatColor           String?                           // MFMCatColor (text, YES)
  mfmJCU                String?                           // MFMJCU (text, YES)
  
  // 曾祖父母情報 (母方母方)
  mmfTitle              String?                           // MMFTitle (text, YES)
  mmfCatName            String?                           // MMFCatName (text, YES)
  mmfCatColor           String?                           // MMFCatColor (text, YES)
  mmfJCU                String?                           // MMFJCU (text, YES)
  
  mmmTitle              String?                           // MMMTitle (text, YES)
  mmmCatName            String?                           // MMMCatName (text, YES)
  mmmCatColor           String?                           // MMMCatColor (text, YES)
  mmmJCU                String?                           // MMMJCU (text, YES)
  
  oldCode               String?                           // OldCode (text, YES)
  
  // システム管理用フィールド（設計書外だが運用に必要）
  catId                 String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  
  // リレーション (設計書に合わせて修正)
  breed                 Breed?      @relation(fields: [breedCode], references: [code])
  cat                   Cat?        @relation(fields: [catId], references: [id])
  color                 CoatColor?  @relation(fields: [coatColorCode], references: [code])
  genderList            GenderList? @relation("PedigreeGenderList", fields: [genderCode], references: [code])

  // パフォーマンス最適化インデックス
  @@index([pedigreeId])
  @@index([breedCode])
  @@index([genderCode])
  @@index([coatColorCode])
  @@index([catName])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([breedCode, genderCode])
  @@index([catName, breedCode])
  @@index([createdAt, breedCode])
  @@map("pedigrees")
}

model CatTag {
  catId     String
  tagId     String
  createdAt DateTime @default(now())
  cat       Cat      @relation(fields: [catId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([catId, tagId])
  @@map("cat_tags")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum BreedingStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CareType {
  VACCINATION
  HEALTH_CHECK
  GROOMING
  DENTAL_CARE
  MEDICATION
  SURGERY
  OTHER
}

enum ScheduleType {
  BREEDING
  CARE
  APPOINTMENT
  REMINDER
  MAINTENANCE
}

enum ScheduleStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
