// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "darwin", "darwin-arm64", "windows", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cats            Cat[]
  breedingRecords BreedingRecord[]
  careRecords     CareRecord[]
  schedules       Schedule[]

  @@map("users")
}

model Breed {
  id          String  @id @default(uuid())
  code        Int     @unique // キー from CSV
  name        String  @unique // 種類名称 from CSV
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cats      Cat[]      @relation("CatBreed") // Name-based Cat relations
  pedigrees Pedigree[] // Code-based Pedigree relations

  @@map("breeds")
}

model CoatColor {
  id          String  @id @default(uuid())
  code        Int     @unique // キー from CSV
  name        String  @unique // 毛色名称 from CSV
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations  
  cats      Cat[]      @relation("CatColor") // Name-based Cat relations
  pedigrees Pedigree[] // Code-based Pedigree relations

  @@map("coat_colors")
}

model GenderList {
  id          String  @id @default(uuid())
  code        Int     @unique // Code from CSV (0,1,2,3,4)
  name        String? @unique // Gender name from CSV (Male, Female, Neuter, Spay)
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  pedigrees Pedigree[] @relation("PedigreeGenderList")

  @@map("gender_list")
}

model Cat {
  id             String @id @default(uuid())
  registrationId String @unique
  name           String

  // Legacy fields for backward compatibility
  legacyBreed String? // Old breed field
  legacyColor String? // Old color field

  // Name-based breed and color relations (for Cat management)
  breedName String? // Brand name like "Minuet(LH)"
  breed     Breed?     @relation("CatBreed", fields: [breedName], references: [name])
  colorName String? // Color name like "Cream Tabby-White"  
  color     CoatColor? @relation("CatColor", fields: [colorName], references: [name])

  pattern     String?
  gender      Gender
  birthDate   DateTime
  weight      Float?
  microchipId String?  @unique
  isActive    Boolean  @default(true)
  notes       String?
  imageUrl    String?

  // Parent information
  fatherId String?
  motherId String?
  father   Cat?    @relation("CatFather", fields: [fatherId], references: [id])
  mother   Cat?    @relation("CatMother", fields: [motherId], references: [id])

  // Children relations
  fatherOf Cat[] @relation("CatFather")
  motherOf Cat[] @relation("CatMother")

  // Owner
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  maleBreedingRecords   BreedingRecord[] @relation("MaleBreeding")
  femaleBreedingRecords BreedingRecord[] @relation("FemaleBreeding")
  careRecords           CareRecord[]
  schedules             Schedule[]
  tags                  CatTag[]
  pedigrees             Pedigree[]

  @@map("cats")
}

model BreedingRecord {
  id              String         @id @default(uuid())
  maleId          String
  femaleId        String
  breedingDate    DateTime
  expectedDueDate DateTime?
  actualDueDate   DateTime?
  numberOfKittens Int?
  notes           String?
  status          BreedingStatus @default(PLANNED)

  male   Cat @relation("MaleBreeding", fields: [maleId], references: [id])
  female Cat @relation("FemaleBreeding", fields: [femaleId], references: [id])

  recordedBy String
  recorder   User   @relation(fields: [recordedBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("breeding_records")
}

model CareRecord {
  id           String    @id @default(uuid())
  catId        String
  careType     CareType
  description  String
  careDate     DateTime
  nextDueDate  DateTime?
  cost         Float?
  veterinarian String?
  notes        String?

  cat Cat @relation(fields: [catId], references: [id])

  recordedBy String
  recorder   User   @relation(fields: [recordedBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("care_records")
}

model Schedule {
  id           String         @id @default(uuid())
  title        String
  description  String?
  scheduleDate DateTime
  scheduleType ScheduleType
  status       ScheduleStatus @default(PENDING)
  priority     Priority       @default(MEDIUM)

  // Optional cat relation
  catId String?
  cat   Cat?    @relation(fields: [catId], references: [id])

  assignedTo String
  assignee   User   @relation(fields: [assignedTo], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("schedules")
}

model Tag {
  id          String  @id @default(uuid())
  name        String  @unique
  color       String  @default("#3B82F6")
  description String?

  cats CatTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model Pedigree {
  id         String @id @default(uuid())
  pedigreeId String @unique // GP from CSV

  // Cat information
  catId String?
  cat   Cat?    @relation(fields: [catId], references: [id])

  // Names (multiple parts)
  title    String? // 猫名前１
  catName2 String? // 猫名前３ (additional name field)  
  catName  String // 猫名前２ (main cat name)

  // Basic info
  breedCode     Int? // 猫種コード
  breed         Breed?     @relation(fields: [breedCode], references: [code])
  gender        Int? // 性別コード (0,1,2,3,4)
  genderList    GenderList? @relation("PedigreeGenderList", fields: [gender], references: [code])
  eyeColor      String? // 目色
  coatColorCode Int? // 毛色コード
  color         CoatColor? @relation(fields: [coatColorCode], references: [code])

  // Dates
  birthDate        DateTime? // 生年月日
  registrationDate DateTime? // 登録年月日

  // People
  breederName String? // 繁殖者名
  ownerName   String? // 所有者名

  // Siblings
  brotherCount Int? // 兄弟の人数
  sisterCount  Int? // 姉妹の人数

  // Notes and other info
  notes   String? // 摘要
  notes2  String? // 摘要２
  otherNo String? // 他団体No
  oldCode String? // 旧コード

  // Father information (from CSV)
  fatherTitle     String? // 父親タイトル
  fatherName      String? // 父親名
  fatherCatName2  String? // 父親猫名2
  fatherCoatColor String? // 父親毛色
  fatherEyeColor  String? // 父親目色
  fatherJCU       String? // 父親JCU
  fatherOtherCode String? // 父親その他コード

  // Mother information (from CSV)
  motherTitle     String? // 母親タイトル
  motherName      String? // 母親名
  motherCatName2  String? // 母親猫名2
  motherCoatColor String? // 母親毛色
  motherEyeColor  String? // 母親目色
  motherJCU       String? // 母親JCU
  motherOtherCode String? // 母親その他コード

  // Grandparent information (FF, FM, MF, MM)
  ffTitle    String? // 父父タイトル
  ffCatName  String? // 父父猫名
  ffCatColor String? // 父父毛色
  ffJCU      String? // 父父JCU
  fmTitle    String? // 父母タイトル
  fmCatName  String? // 父母猫名
  fmCatColor String? // 父母毛色
  fmJCU      String? // 父母JCU
  mfTitle    String? // 母父タイトル
  mfCatName  String? // 母父猫名
  mfCatColor String? // 母父毛色
  mfJCU      String? // 母父JCU
  mmTitle    String? // 母母タイトル
  mmCatName  String? // 母母猫名
  mmCatColor String? // 母母毛色
  mmJCU      String? // 母母JCU

  // Great-grandparent information (FFF, FFM, FMF, FMM, MFF, MFM, MMF, MMM)
  fffTitle    String? // 父父父タイトル
  fffCatName  String? // 父父父猫名
  fffCatColor String? // 父父父毛色
  fffJCU      String? // 父父父JCU
  ffmTitle    String? // 父父母タイトル
  ffmCatName  String? // 父父母猫名
  ffmCatColor String? // 父父母毛色
  ffmJCU      String? // 父父母JCU
  fmfTitle    String? // 父母父タイトル
  fmfCatName  String? // 父母父猫名
  fmfCatColor String? // 父母父毛色
  fmfJCU      String? // 父母父JCU
  fmmTitle    String? // 父母母タイトル
  fmmCatName  String? // 父母母猫名
  fmmCatColor String? // 父母母毛色
  fmmJCU      String? // 父母母JCU
  mffTitle    String? // 母父父タイトル
  mffCatName  String? // 母父父猫名
  mffCatColor String? // 母父父毛色
  mffJCU      String? // 母父父JCU
  mfmTitle    String? // 母父母タイトル
  mfmCatName  String? // 母父母猫名
  mfmCatColor String? // 母父母毛色
  mfmJCU      String? // 母父母JCU
  mmfTitle    String? // 母母父タイトル
  mmfCatName  String? // 母母父猫名
  mmfCatColor String? // 母母父毛色
  mmfJCU      String? // 母母父JCU
  mmmTitle    String? // 母母母タイトル
  mmmCatName  String? // 母母母猫名
  mmmCatColor String? // 母母母毛色
  mmmJCU      String? // 母母母JCU

  // Parent relations
  fatherPedigreeId String?
  fatherPedigree   Pedigree?  @relation("PedigreeFather", fields: [fatherPedigreeId], references: [id])
  fatherOf         Pedigree[] @relation("PedigreeFather")

  motherPedigreeId String?
  motherPedigree   Pedigree?  @relation("PedigreeMother", fields: [motherPedigreeId], references: [id])
  motherOf         Pedigree[] @relation("PedigreeMother")

  // Grandparent relations
  paternalGrandfatherId String?
  paternalGrandfather   Pedigree?  @relation("PatGrandfather", fields: [paternalGrandfatherId], references: [id])
  paternalGrandfatherOf Pedigree[] @relation("PatGrandfather")

  paternalGrandmotherId String?
  paternalGrandmother   Pedigree?  @relation("PatGrandmother", fields: [paternalGrandmotherId], references: [id])
  paternalGrandmotherOf Pedigree[] @relation("PatGrandmother")

  maternalGrandfatherId String?
  maternalGrandfather   Pedigree?  @relation("MatGrandfather", fields: [maternalGrandfatherId], references: [id])
  maternalGrandfatherOf Pedigree[] @relation("MatGrandfather")

  maternalGrandmotherId String?
  maternalGrandmother   Pedigree?  @relation("MatGrandmother", fields: [maternalGrandmotherId], references: [id])
  maternalGrandmotherOf Pedigree[] @relation("MatGrandmother")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pedigrees")
}

model CatTag {
  catId String
  tagId String

  cat Cat @relation(fields: [catId], references: [id], onDelete: Cascade)
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([catId, tagId])
  @@map("cat_tags")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum BreedingStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CareType {
  VACCINATION
  HEALTH_CHECK
  GROOMING
  DENTAL_CARE
  MEDICATION
  SURGERY
  OTHER
}

enum ScheduleType {
  BREEDING
  CARE
  APPOINTMENT
  REMINDER
  MAINTENANCE
}

enum ScheduleStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
